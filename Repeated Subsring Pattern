// Approach 1-> TC->O(N^2)

bool isRepeatedSubstring(string s)
	    {
	        int n=s.length();
	        
	        for(int i=0; i<=n/2; i++)
	        {
	            if(n%i==0)
	            {
	                string substr=s.substr(0, len);
	                string repeated="";
	                
	                for(int j=0; j<n/len; j++)
	                {
	                    repeated+=substr;
	                }
	                
	                if(repeated==s) return true;
	            }
	        }
	        return false;
	    }

// Approach 2->
Double the substring and remove the first and last character of the doubled substring then check if the original string is the substring
of the doubled string if yes then return true else false

bool repeatedSubstringPattern(string s) {
    string doubled = s + s;
    // Remove the first and last character and check if the original string is a substring of it
    return doubled.substr(1, doubled.size() - 2).find(s) != string::npos;
}

